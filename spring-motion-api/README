# üåÄ Spring Boot JNI Motion Controller API

This project provides a RESTful Spring Boot interface to control motion hardware using a native C++ backend accessed via JNI.

---

## üìÅ Directory Structure

```
sample_proj/
‚îú‚îÄ‚îÄ cpp_wrapper/                   # Native JNI wrapper (C++ implementation)
‚îÇ   ‚îú‚îÄ‚îÄ MotionSystemWrapper.cpp
‚îÇ   ‚îú‚îÄ‚îÄ MotionController.cpp
‚îÇ   ‚îú‚îÄ‚îÄ CalibrationManager.cpp
‚îÇ   ‚îú‚îÄ‚îÄ libmotionwrapper.dylib     # Built JNI dynamic library
‚îÇ   ‚îú‚îÄ‚îÄ com/cml/wrapper/*.class    # Compiled JNI interface class
‚îÇ   ‚îî‚îÄ‚îÄ Makefile
‚îî‚îÄ‚îÄ spring-motion-api/            # Spring Boot REST API
    ‚îú‚îÄ‚îÄ pom.xml
    ‚îî‚îÄ‚îÄ src/main/java/com/example/motion/
        ‚îú‚îÄ‚îÄ MotionApiApplication.java
        ‚îú‚îÄ‚îÄ MotionControllerApi.java
        ‚îî‚îÄ‚îÄ MotionControllerService.java
```

---

## üõ†Ô∏è Build Process

### 1. ‚úÖ Build JNI Wrapper

Navigate to the `cpp_wrapper` directory:

```bash
cd ../cpp_wrapper
make -j
```

This compiles the native C++ source files and produces `libmotionwrapper.dylib`.

> Ensure you have `g++` or `clang++` and the Java JDK installed.

---

### 2. ‚úÖ Compile the JNI Java Class

Still in `cpp_wrapper`, compile `MotionSystemWrapper.java` to generate the `.class` file in the correct package structure:

```bash
javac -d . com/cml/wrapper/MotionSystemWrapper.java
```

---

### 3. ‚úÖ Build and Run Spring Boot API

Navigate to the Spring Boot project:

```bash
cd ../spring-motion-api
mvn clean install
```

To run the Spring Boot application and ensure the native library is correctly loaded:

```bash
mvn spring-boot:run \
  -Dspring-boot.run.jvmArguments="-Djava.library.path=../cpp_wrapper"
```

---

## üåê API Usage

### Initialize System

```bash
curl -X POST http://localhost:8080/motion/initialize
```

### Home All Axes

```bash
curl -X POST http://localhost:8080/motion/home
```

### Move to Specific Positions

```bash
curl -X POST -H "Content-Type: application/json" \
  -d '[100.0, 200.0]' \
  http://localhost:8080/motion/move
```

## Build and Start Docker Image

```bash
docker build -t spring-motion-api .
docker run -p 8080:8080 spring-motion-api
docker run -d -p 8080:8080 --name spring-motion-api spring-motion-api
```

---

## üìù Notes

- `libmotionwrapper.dylib` must be accessible via `java.library.path`.
- You can also copy the `.dylib` to `/usr/local/lib` or export:
  
  ```bash
  export DYLD_LIBRARY_PATH=../cpp_wrapper:$DYLD_LIBRARY_PATH
  ```

- Make sure JNI class names and package paths match exactly.

---

## üìç Author

Yuchen Liu 

